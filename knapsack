#include<stdio.h>

int max(int a, int b) { return (a>b)? a:b;}

int knapsack(int W, int wt[], int pt[], int n){
    // recursion 
    // if(n==0 || W==0) return 0;
    // if(W < wt[n - 1] ) return knapsack(W, wt,pt, n-1);
    // else return max(pt[n-1]+ knapsack(W- wt[n-1],wt, pt, n-1), knapsack(W, wt, pt,n-1));

    // DP
    int i,w;
    int k[n+1][W+1];
    for(int i=0;i<=n;i++){
        for(int w=0;w<=W;w++){
            if(i==0 || w == 0 ) k[i][w]=0;
            else if(wt[i-1] <= W) k[i][w] = max(pt[i-1]+k[i-1][w-wt[i-1]], k[i-1][w]);
            else k[i][w] = k[i-1][w];
        }
    }
    return k[n][W];
}

int main(){
    int profit[] = {60, 100, 120};
    int weight[] = {10, 20, 30};
    int W=50;
    int n = sizeof(profit)/sizeof(profit[0]);
    printf("%d ", knapsack(W, weight, profit, n));
    return 0;
}
